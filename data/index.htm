<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf8">
        <title>ESP Wetterstation</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="css/w3.css">
        <style>
            @media only screen and (min-width: 900px) {
                body { width: 900px; margin: auto }
            }
            .loader {
                width: 40px;
                height: 40px;
                border-radius: 8px;
                background-repeat: no-repeat;
                background-image: url("img/reload.svg");
                color: white;
                background-color: teal;
                float: right !important;
            }
            .loader:hover {
                background-color: grey;
            }
            .loader-loading {
                background-image: url("img/reload-spin.svg") !important;
            }
            .loader-error {
                background-color: red !important;
            }
        </style>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/humanize-duration/3.15.3/humanize-duration.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
        <script type="text/javascript">
        var vueApp;

        function openTab(ident) {
            var element = document.getElementById(ident);
            if (!element) {
                // default to the env tab
                ident = "env";
                element = document.getElementById(ident);
            }
            switch(ident) {
                case "status":
                    getStatus();
                    break;
                case "env":
                    getEnv();
                    break;
                case "history":
                    if (vueApp.history.length == 0) getHistory();
                    break;
                case "plot":
                    if (vueApp.history.length == 0) getHistory();
                    break;
                case "config":
                    getConfig();
                    break;
            }
            if (element) {
                var tabs = document.getElementsByClassName("tab");
                for (let tab of tabs) {
                    tab.style.display = (tab === element) ? "block" : "none";
                }
            }
        }

        function setLoader(name, state) {
            var elements = document.getElementsByName(name);
            for (let element of elements) {
                let cn = "loader";
                switch (state) {
                    case "loading":
                        cn += " loader-loading";
                        break;
                    case "error":
                        cn += " loader-error";
                        break;
                    case "done":
                        break;
                }
                element.className = cn;
            }
        }

        function getStatus() {
            setLoader("status-loader", "loading");
            axios.get("/api/status").then(function(response) {
                vueApp.properties.length = 0; // clear old data
                for (let prop of response.data.status) {
                    if (prop.type === "seconds") {
                        prop.displayValue = humanizeDuration(prop.value*1000);
                    }
                    vueApp.properties.push(prop);
                }
                vueApp.properties.hostname = response.data.hostname;
                vueApp.properties.ipaddr = response.data.ipaddr;
                setLoader("status-loader", "done");
            }).catch(function(error) {
                setLoader("status-loader", "error");
            });
        }

        function getConfig(save = false) {
            setLoader("config-loader", "loading");
            let promise;
            if (save) {
                let obj = {
                    historyInterval: vueApp.localConfig.historyInterval,
                    sleepOnReset: vueApp.localConfig.sleepOnReset
                };
                promise = axios.put("/api/config", obj);
            } else {
                promise = axios.get("/api/config");
            }
            promise.then(function(response) {
                if ("historyInterval" in response.data) {
                    let value = response.data.historyInterval;
                    vueApp.serverConfig.historyInterval = value;
                    vueApp.serverConfig.standard = false;
                    for (let option of vueApp.historyIntervalOptions) {
                        if (option.value == value) {
                            vueApp.serverConfig.standard = true;
                            break;
                        }
                    }
                    vueApp.localConfig.historyInterval = value;
                }
                if ("sleepOnReset" in response.data) {
                    let value = response.data.sleepOnReset ? true : false;
                    vueApp.localConfig.sleepOnReset = vueApp.serverConfig.sleepOnReset = value;
                }
                setLoader("config-loader", "done");
            }).catch(function(error) {
                setLoader("config-loader", "error");
            });
        }

        function getEnv() {
            setLoader("env-loader", "loading");
            axios.get("/api/env").then(function(response) {
                var env = response.data;
                env.time = new Date(env.time * 1000);
                vueApp.env = env;
                setLoader("env-loader", "done");
            }).catch(function(error) {
                setLoader("env-loader", "error");
            });
        }

        function getHistory() {
            setLoader("history-loader", "loading");
            axios.get("/api/history").then(function(response) {
                let history = response.data.history;
                let temp = [], pressure = [], humidity = [], gas = [];
                for (let entry of history) {
                    let time = new Date(entry.time * 1000);
                    entry.time = time;
                    temp.push({ x: time, y: entry.temp });
                    pressure.push({ x: time, y: entry.pressure });
                    humidity.push({ x: time, y: entry.humidity });
                    gas.push({ x: time, y: entry.gas });
                }
                chart.data.datasets[0].data = temp;
                chart.data.datasets[1].data = pressure;
                chart.data.datasets[2].data = humidity;
                chart.data.datasets[3].data = gas;
                chart.update();
                vueApp.history = history;
                setLoader("history-loader", "done");
            }).catch(function(error) {
                setLoader("history-loader", "error");
            });
        }

        function init() {
            vueApp = new Vue({
                el: '#app',
                data: {
                    properties: [{ name: "Loading...", value: "Loading..." }],
                    env: { temp: 0, pressure: 0, humidity: 0, gas: 0, time: new Date() },
                    history: [],
                    serverConfig: { historyInterval: 10, standard: true, sleepOnReset: false },
                    localConfig: { historyInterval: 10, sleepOnReset: false },
                    historyIntervalOptions: [
                        { name: "10 s", value: 10 },
                        { name: "1 min", value: 60 },
                        { name: "10 min", value: 600 },
                        { name: "1 h", value: 3600 }
                    ]
                },
                computed: {
                    historyIntervalChanged: function() {
                        return this.serverConfig.historyInterval !== this.localConfig.historyInterval;
                    },
                    sleepOnResetChanged: function() {
                        return this.serverConfig.sleepOnReset !== this.localConfig.sleepOnReset;
                    },
                    configChanged: function() {
                        return this.historyIntervalChanged || this.sleepOnResetChanged;
                    }
                }
            });
            chart = new Chart(document.getElementById("chart"), {
                type: 'line',
                data: {
                    datasets: [
                    {
                        data: [],
                        label: "Temperatur [\xb0C]",
                        yAxisID: "temp",
                        radius: 0,
                        borderColor: 'Red',
                        backgroundColor: 'rgba(255,0,0,0.1)',
                        lineTension: 0,
                        fill: false
                    },
                    {
                        data: [],
                        label: "Luftdruck [mbar]",
                        yAxisID: "pressure",
                        radius: 0,
                        borderColor: 'Black',
                        backgroundColor: 'rgba(0,0,0,0.1)',
                        lineTension: 0,
                        fill: false
                    },
                    {
                        data: [],
                        label: "Feuchte [%]",
                        yAxisID: "humidity",
                        radius: 0,
                        borderColor: 'Blue',
                        backgroundColor: 'rgba(0,0,255,0.1)',
                        lineTension: 0,
                        fill: false
                    },
                    {
                        data: [],
                        label: "Luftqualit√§t",
                        yAxisID: "gas",
                        radius: 0,
                        borderColor: 'Green',
                        backgroundColor: 'rgba(0,255,0,0.1)',
                        lineTension: 0,
                        fill: false
                    },]
                },
                options: {
                    maintainAspectRatio: false,
                    legend: { display: true },
                    scales: {
                        xAxes: [{
                            type: 'time'
                        }],
                        yAxes: [{
                            id: "temp",
                            position: "left",
                            ticks: {
                                stepSize: 10,
                                suggestedMax: 40,
                                suggestedMin: -10,
                                fontColor: "Red"
                            }
                        },
                        {
                            id: "pressure",
                            position: "left",
                            ticks: {
                                stepSize: 50,
                                suggestedMax: 1200,
                                suggestedMin: 950,
                                fontColor: "Black"
                            }
                        },
                        {
                            id: "humidity",
                            position: "right",
                            ticks: {
                                stepSize: 10,
                                suggestedMin: 0,
                                suggestedMax: 100,
                                fontColor: "Blue"
                            }
                        },
                        {
                            id: "gas",
                            position: "right",
                            ticks: {
                                stepSize: 100,
                                suggestedMin: 0,
                                suggestedMax: 500,
                                fontColor: "Green"
                            }
                        }]
                    }
                }
            });
            getStatus(); // obtain IP address and host name
            var frag = window.location.hash.substring(1);
            if (frag) {
                openTab(frag);
            } else {
                openTab("env");
            }
        }
    </script>
    </head>
    <body>
    <div id="app">
        <div class="w3-bar w3-teal">
           <div class="w3-bar-item">ESP Wetterstation</div>
           <div class="w3-bar-item w3-right">{{ properties.ipaddr }}</div>
           <div class="w3-bar-item w3-right">{{ properties.hostname }}</div>
        </div>
        <div class="w3-bar w3-black">
            <button class="w3-bar-item w3-button" onclick="openTab('env')">BME680</button>
            <button class="w3-bar-item w3-button" onclick="openTab('history')">History</button>
            <button class="w3-bar-item w3-button" onclick="openTab('plot')">Verlauf</button>
            <button class="w3-bar-item w3-button" onclick="openTab('status')">Status</button>
            <button class="w3-bar-item w3-button" onclick="openTab('config')">Config</button>
        </div>

        <div id="env" class="tab w3-container">
            <h2>Sensoren <span name="env-loader" class="loader" onclick="getEnv()"></span></h2>
            <table class="w3-table w3-striped w3-border">
                <tr class="w3-teal">
                    <th>Variable</th>
                    <th>Wert</th>
                </tr>
                <tr>
                    <td>Temperatur</td>
                    <td>{{ env.temp }} &deg;C</td>
                </tr>
                <tr>
                    <td>Luftdruck</td>
                    <td>{{ env.pressure }} mbar</td>
                </tr>
                <tr>
                    <td>Luftfeuchtigkeit</td>
                    <td>{{ env.humidity }} %</td>
                </tr>
                <tr>
                    <td>Luftqualit√§t</td>
                    <td>{{ env.gas }}</td>
                </tr>
                <tr>
                    <td>Messzeit</td>
                    <td>{{ env.time.toLocaleString() }}</td>
            </table>
        </div>

        <div id="history" class="tab w3-container">
            <h2>History <span name="history-loader" class="loader" onclick="getHistory()"></span></h2>
            <table class="w3-table w3-striped w3-border w3-centered w3-tiny">
                <tr class="w3-teal">
                    <th>Zeit</th>
                    <th>Temperatur</th>
                    <th>Druck</th>
                    <th>Feuchte</th>
                    <th>Luftqualit√§t</th>
                </tr>
                <tr v-for="entry in history">
                    <td>{{ entry.time.toLocaleString() }}</td>
                    <td>{{ entry.temp }}</td>
                    <td>{{ entry.pressure }}</td>
                    <td>{{ entry.humidity }}</td>
                    <td>{{ entry.gas }}</td>
                </tr>
            </table>
        </div>

        <div id="status" class="tab w3-container">
            <h2>Status <span name="status-loader" class="loader" onclick="getStatus()"></span></h2>
            <table class="w3-table w3-striped w3-border">
                <tr class="w3-teal">
                    <th>Variable</th>
                    <th>Wert</th>
                </tr>
                <tr v-for="prop in properties">
                    <td>{{ prop.name }}</td>
                    <td>{{ prop.displayValue ? prop.displayValue : prop.value }}</td>
                </tr>
            </table>
        </div>

        <div id="plot" class="tab w3-container" style="display:none">
            <h2>Verlauf <span name="history-loader" class="loader" onclick="getHistory()"></span></h2>
            <div id="chart-container" style="height:400px">
                <canvas id="chart"></canvas>
            </div>
        </div>

        <div id="config" class="tab w3-container">
            <h2>Konfiguration <span name="config-loader" class="loader" onclick="getConfig()"></span></h2>
            <div class="w3-row">
                <label>Aufzeichnungsintervall</label>
                <select class="w3-select w3-border" v-bind:class="{ 'w3-pale-red': historyIntervalChanged }" v-model="localConfig.historyInterval">
                    <option v-if="!serverConfig.standard" disabled :value="serverConfig.historyInterval">
                        Unver√§ndert ({{serverConfig.historyInterval}} s)
                    </option>
                    <option v-for="option in historyIntervalOptions" v-bind:value="option.value">{{option.name}}</option>
                </select>
            </div>
            <div class="w3-row">
                <input type="checkbox" id="checkReset" class="w3-check"
                       v-model="localConfig.sleepOnReset">
                <label for="checkReset" v-bind:class="{'w3-pale-red':sleepOnResetChanged}">Reset-Taste schaltet ein/aus</label>
            </div>
            <div class="w3-bar w3-padding-16">
                <input class="w3-button w3-right w3-teal w3-round-large" type="submit"
                       value="Speichern" v-show="configChanged" onclick="getConfig(true)" />
            </div>
        </div>
    </div>
    <script type="text/javascript">init();</script>
    </body>
</html>
